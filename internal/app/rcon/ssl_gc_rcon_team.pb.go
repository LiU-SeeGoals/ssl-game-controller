// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: rcon/ssl_gc_rcon_team.proto

package rcon

import (
	state "github.com/RoboCup-SSL/ssl-game-controller/internal/app/state"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// the current advantage choice of the team
// the choice is valid until another choice is received
// if the team disconnects, the choice is reset to its default (STOP)
// teams may either send their current choice continuously or only on change
type AdvantageChoice int32

const (
	// stop the game
	AdvantageChoice_STOP AdvantageChoice = 0
	// keep the game running
	AdvantageChoice_CONTINUE AdvantageChoice = 1
)

// Enum value maps for AdvantageChoice.
var (
	AdvantageChoice_name = map[int32]string{
		0: "STOP",
		1: "CONTINUE",
	}
	AdvantageChoice_value = map[string]int32{
		"STOP":     0,
		"CONTINUE": 1,
	}
)

func (x AdvantageChoice) Enum() *AdvantageChoice {
	p := new(AdvantageChoice)
	*p = x
	return p
}

func (x AdvantageChoice) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdvantageChoice) Descriptor() protoreflect.EnumDescriptor {
	return file_rcon_ssl_gc_rcon_team_proto_enumTypes[0].Descriptor()
}

func (AdvantageChoice) Type() protoreflect.EnumType {
	return &file_rcon_ssl_gc_rcon_team_proto_enumTypes[0]
}

func (x AdvantageChoice) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AdvantageChoice) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AdvantageChoice(num)
	return nil
}

// Deprecated: Use AdvantageChoice.Descriptor instead.
func (AdvantageChoice) EnumDescriptor() ([]byte, []int) {
	return file_rcon_ssl_gc_rcon_team_proto_rawDescGZIP(), []int{0}
}

// a registration that must be send by teams to the controller as the very first message
type TeamRegistration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the exact team name as published by the game-controller
	TeamName *string `protobuf:"bytes,1,req,name=team_name,json=teamName" json:"team_name,omitempty"`
	// signature can optionally be specified to enable secure communication
	Signature *Signature `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	// the team (relevant only if a team plays against itself)
	Team          *state.Team `protobuf:"varint,3,opt,name=team,enum=Team" json:"team,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TeamRegistration) Reset() {
	*x = TeamRegistration{}
	mi := &file_rcon_ssl_gc_rcon_team_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamRegistration) ProtoMessage() {}

func (x *TeamRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_rcon_ssl_gc_rcon_team_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamRegistration.ProtoReflect.Descriptor instead.
func (*TeamRegistration) Descriptor() ([]byte, []int) {
	return file_rcon_ssl_gc_rcon_team_proto_rawDescGZIP(), []int{0}
}

func (x *TeamRegistration) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *TeamRegistration) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *TeamRegistration) GetTeam() state.Team {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return state.Team(0)
}

// wrapper for all messages from a team's computer to the controller
type TeamToController struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// signature can optionally be specified to enable secure communication
	Signature *Signature `protobuf:"bytes,1,opt,name=signature" json:"signature,omitempty"`
	// Types that are valid to be assigned to Msg:
	//
	//	*TeamToController_DesiredKeeper
	//	*TeamToController_AdvantageChoice
	//	*TeamToController_SubstituteBot
	//	*TeamToController_Ping
	Msg           isTeamToController_Msg `protobuf_oneof:"msg"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TeamToController) Reset() {
	*x = TeamToController{}
	mi := &file_rcon_ssl_gc_rcon_team_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamToController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamToController) ProtoMessage() {}

func (x *TeamToController) ProtoReflect() protoreflect.Message {
	mi := &file_rcon_ssl_gc_rcon_team_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamToController.ProtoReflect.Descriptor instead.
func (*TeamToController) Descriptor() ([]byte, []int) {
	return file_rcon_ssl_gc_rcon_team_proto_rawDescGZIP(), []int{1}
}

func (x *TeamToController) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *TeamToController) GetMsg() isTeamToController_Msg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *TeamToController) GetDesiredKeeper() int32 {
	if x != nil {
		if x, ok := x.Msg.(*TeamToController_DesiredKeeper); ok {
			return x.DesiredKeeper
		}
	}
	return 0
}

func (x *TeamToController) GetAdvantageChoice() AdvantageChoice {
	if x != nil {
		if x, ok := x.Msg.(*TeamToController_AdvantageChoice); ok {
			return x.AdvantageChoice
		}
	}
	return AdvantageChoice_STOP
}

func (x *TeamToController) GetSubstituteBot() bool {
	if x != nil {
		if x, ok := x.Msg.(*TeamToController_SubstituteBot); ok {
			return x.SubstituteBot
		}
	}
	return false
}

func (x *TeamToController) GetPing() bool {
	if x != nil {
		if x, ok := x.Msg.(*TeamToController_Ping); ok {
			return x.Ping
		}
	}
	return false
}

type isTeamToController_Msg interface {
	isTeamToController_Msg()
}

type TeamToController_DesiredKeeper struct {
	// request a new desired keeper id
	DesiredKeeper int32 `protobuf:"varint,2,opt,name=desired_keeper,json=desiredKeeper,oneof"`
}

type TeamToController_AdvantageChoice struct {
	// response to an advantage choice request
	AdvantageChoice AdvantageChoice `protobuf:"varint,3,opt,name=advantage_choice,json=advantageChoice,enum=AdvantageChoice,oneof"`
}

type TeamToController_SubstituteBot struct {
	// request to substitute a robot at the next possibility
	SubstituteBot bool `protobuf:"varint,4,opt,name=substitute_bot,json=substituteBot,oneof"`
}

type TeamToController_Ping struct {
	// send a ping to the GC to test if the connection is still open.
	// the value is ignored and a reply is sent back
	Ping bool `protobuf:"varint,5,opt,name=ping,oneof"`
}

func (*TeamToController_DesiredKeeper) isTeamToController_Msg() {}

func (*TeamToController_AdvantageChoice) isTeamToController_Msg() {}

func (*TeamToController_SubstituteBot) isTeamToController_Msg() {}

func (*TeamToController_Ping) isTeamToController_Msg() {}

// wrapper for all messages from controller to a team's computer
type ControllerToTeam struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Msg:
	//
	//	*ControllerToTeam_ControllerReply
	Msg           isControllerToTeam_Msg `protobuf_oneof:"msg"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControllerToTeam) Reset() {
	*x = ControllerToTeam{}
	mi := &file_rcon_ssl_gc_rcon_team_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControllerToTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerToTeam) ProtoMessage() {}

func (x *ControllerToTeam) ProtoReflect() protoreflect.Message {
	mi := &file_rcon_ssl_gc_rcon_team_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerToTeam.ProtoReflect.Descriptor instead.
func (*ControllerToTeam) Descriptor() ([]byte, []int) {
	return file_rcon_ssl_gc_rcon_team_proto_rawDescGZIP(), []int{2}
}

func (x *ControllerToTeam) GetMsg() isControllerToTeam_Msg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *ControllerToTeam) GetControllerReply() *ControllerReply {
	if x != nil {
		if x, ok := x.Msg.(*ControllerToTeam_ControllerReply); ok {
			return x.ControllerReply
		}
	}
	return nil
}

type isControllerToTeam_Msg interface {
	isControllerToTeam_Msg()
}

type ControllerToTeam_ControllerReply struct {
	// a reply from the controller
	ControllerReply *ControllerReply `protobuf:"bytes,1,opt,name=controller_reply,json=controllerReply,oneof"`
}

func (*ControllerToTeam_ControllerReply) isControllerToTeam_Msg() {}

var File_rcon_ssl_gc_rcon_team_proto protoreflect.FileDescriptor

var file_rcon_ssl_gc_rcon_team_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x72, 0x63, 0x6f, 0x6e, 0x2f, 0x73, 0x73, 0x6c, 0x5f, 0x67, 0x63, 0x5f, 0x72, 0x63,
	0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x73, 0x6c, 0x5f, 0x67, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x72, 0x63, 0x6f, 0x6e, 0x2f, 0x73,
	0x73, 0x6c, 0x5f, 0x67, 0x63, 0x5f, 0x72, 0x63, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x74, 0x0a, 0x10, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x74,
	0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x22, 0xea, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x61, 0x6d, 0x54,
	0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x12, 0x3d,
	0x0a, 0x10, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x64,
	0x76, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a,
	0x0e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x5f, 0x62, 0x6f, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x05, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0x5e, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x54, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x3d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x4a, 0x04, 0x08,
	0x02, 0x10, 0x03, 0x2a, 0x29, 0x0a, 0x0f, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x10, 0x01, 0x42, 0x54,
	0x42, 0x12, 0x53, 0x73, 0x6c, 0x47, 0x63, 0x52, 0x63, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x52, 0x6f, 0x62, 0x6f, 0x43, 0x75, 0x70, 0x2d, 0x53, 0x53, 0x4c, 0x2f, 0x73,
	0x73, 0x6c, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x70, 0x2f,
	0x72, 0x63, 0x6f, 0x6e,
}

var (
	file_rcon_ssl_gc_rcon_team_proto_rawDescOnce sync.Once
	file_rcon_ssl_gc_rcon_team_proto_rawDescData = file_rcon_ssl_gc_rcon_team_proto_rawDesc
)

func file_rcon_ssl_gc_rcon_team_proto_rawDescGZIP() []byte {
	file_rcon_ssl_gc_rcon_team_proto_rawDescOnce.Do(func() {
		file_rcon_ssl_gc_rcon_team_proto_rawDescData = protoimpl.X.CompressGZIP(file_rcon_ssl_gc_rcon_team_proto_rawDescData)
	})
	return file_rcon_ssl_gc_rcon_team_proto_rawDescData
}

var file_rcon_ssl_gc_rcon_team_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_rcon_ssl_gc_rcon_team_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_rcon_ssl_gc_rcon_team_proto_goTypes = []any{
	(AdvantageChoice)(0),     // 0: AdvantageChoice
	(*TeamRegistration)(nil), // 1: TeamRegistration
	(*TeamToController)(nil), // 2: TeamToController
	(*ControllerToTeam)(nil), // 3: ControllerToTeam
	(*Signature)(nil),        // 4: Signature
	(state.Team)(0),          // 5: Team
	(*ControllerReply)(nil),  // 6: ControllerReply
}
var file_rcon_ssl_gc_rcon_team_proto_depIdxs = []int32{
	4, // 0: TeamRegistration.signature:type_name -> Signature
	5, // 1: TeamRegistration.team:type_name -> Team
	4, // 2: TeamToController.signature:type_name -> Signature
	0, // 3: TeamToController.advantage_choice:type_name -> AdvantageChoice
	6, // 4: ControllerToTeam.controller_reply:type_name -> ControllerReply
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_rcon_ssl_gc_rcon_team_proto_init() }
func file_rcon_ssl_gc_rcon_team_proto_init() {
	if File_rcon_ssl_gc_rcon_team_proto != nil {
		return
	}
	file_rcon_ssl_gc_rcon_proto_init()
	file_rcon_ssl_gc_rcon_team_proto_msgTypes[1].OneofWrappers = []any{
		(*TeamToController_DesiredKeeper)(nil),
		(*TeamToController_AdvantageChoice)(nil),
		(*TeamToController_SubstituteBot)(nil),
		(*TeamToController_Ping)(nil),
	}
	file_rcon_ssl_gc_rcon_team_proto_msgTypes[2].OneofWrappers = []any{
		(*ControllerToTeam_ControllerReply)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rcon_ssl_gc_rcon_team_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rcon_ssl_gc_rcon_team_proto_goTypes,
		DependencyIndexes: file_rcon_ssl_gc_rcon_team_proto_depIdxs,
		EnumInfos:         file_rcon_ssl_gc_rcon_team_proto_enumTypes,
		MessageInfos:      file_rcon_ssl_gc_rcon_team_proto_msgTypes,
	}.Build()
	File_rcon_ssl_gc_rcon_team_proto = out.File
	file_rcon_ssl_gc_rcon_team_proto_rawDesc = nil
	file_rcon_ssl_gc_rcon_team_proto_goTypes = nil
	file_rcon_ssl_gc_rcon_team_proto_depIdxs = nil
}
